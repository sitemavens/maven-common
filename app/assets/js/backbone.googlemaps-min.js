/*!
 * Backbone.GoogleMaps
 * A Backbone JS layer for the GoogleMaps API
 * Copyright (c)2012 Edan Schwartz
 * Distributed under MIT license
 * https://github.com/eschwartz/backbone.googlemaps
 */
;Backbone.GoogleMaps=(function(d,b,c){var a={};a.Location=d.Model.extend({constructor:function(){b.bindAll(this,"select","deselect","toggleSelect","getLatLng","getLatlng");this.defaults=b.extend({},{lat:0,lng:0,selected:false,title:""},this.defaults);d.Model.prototype.constructor.apply(this,arguments)},select:function(){if(!this.get("selected")){this.set("selected",true);this.trigger("selected",this);d.Events.trigger("location:selected",this)}},deselect:function(){if(this.get("selected")){this.set("selected",false);this.trigger("deselected",this);d.Events.trigger("location:deselected",this)}},toggleSelect:function(){if(this.get("selected")){this.deselect()}else{this.select()}},getLatlng:function(){return this.getLatLng()},getLatLng:function(){return new google.maps.LatLng(this.get("lat"),this.get("lng"))}});a.LocationCollection=d.Collection.extend({model:a.Location,constructor:function(){d.Collection.prototype.constructor.apply(this,arguments);d.Events.on("location:selected",function(e){this.each(function(f){if(e.cid!==f.cid){f.deselect()}})},this)}});a.MapView=d.View.extend({mapEvents:{},overlayOptions:{},constructor:function(){b.bindAll(this);d.View.prototype.constructor.apply(this,arguments);if(!google||!google.maps){throw new Error("Google maps API is not loaded.")}if(!this.options.map&&!this.map){throw new Error("A map must be specified.")}this.gOverlay=this.map=this.options.map||this.map;this.overlayOptions||(this.overlayOptions=this.options.overlayOptions)},bindMapEvents:function(f){f||(f=this.mapEvents);for(event in f){var e=f[event];google.maps.event.addListener(this.gOverlay,event,this[e])}},render:function(){if(this.beforeRender){this.beforeRender()}this.bindMapEvents();if(this.onRender){this.onRender()}return this},close:function(){if(this.beforeClose){this.beforeClose()}google.maps.event.clearInstanceListeners(this.gOverlay);if(this.gOverlay.setMap){this.gOverlay.setMap(null)}this.gOverlay=null;if(this.onClose){this.onClose()}}});a.InfoWindow=a.MapView.extend({constructor:function(){a.MapView.prototype.constructor.apply(this,arguments);b.bindAll(this,"render","close");if(!this.options.marker&&!this.marker){throw new Error("A marker must be specified for InfoWindow view.")}this.marker=this.options.marker||this.marker;this.template=this.template||this.options.template},render:function(){if(this.beforeRender){this.beforeRender()}a.MapView.prototype.render.apply(this,arguments);var e=(this.template)?c(this.template).html():"<h2><%=title %></h2>";this.$el.html(b.template(e,this.model.toJSON()));this.gOverlay=new google.maps.InfoWindow(b.extend({content:this.$el[0]},this.overlayOptions));this.gOverlay.open(this.map,this.marker);if(this.onRender){this.onRender()}return this},close:function(){if(this.beforeClose){this.beforeClose()}a.MapView.prototype.close.apply(this,arguments);if(this.onClose){this.onClose()}return this}});a.MarkerView=a.MapView.extend({infoWindow:a.InfoWindow,constructor:function(){a.MapView.prototype.constructor.apply(this,arguments);b.bindAll(this,"render","close","openDetail","closeDetail","toggleSelect");if(!this.model){throw new Error("A model must be specified for a MarkerView")}this.gOverlay=new google.maps.Marker(b.extend({position:this.model.getLatLng(),map:this.map,title:this.model.title,animation:google.maps.Animation.DROP,visible:false},this.overlayOptions));b.extend(this.mapEvents,{click:"toggleSelect"});this.model.on("selected",this.openDetail,this);this.model.on("deselected",this.closeDetail,this);this.model.on("change:lat change:lng",this.refreshOverlay,this);this.bindMapEvents({position_changed:"updateModelPosition"})},refreshOverlay:function(){if(!this.model.getLatLng().equals(this.gOverlay.getPosition())){this.gOverlay.setOptions({position:this.model.getLatLng()})}},updateModelPosition:function(){var e=this.gOverlay.getPosition();if(!this.model.getLatLng().equals(e)){this.model.set({lat:e.lat(),lng:e.lng()})}},toggleSelect:function(){this.model.toggleSelect()},render:function(){if(this.beforeRender){this.beforeRender()}a.MapView.prototype.render.apply(this,arguments);this.gOverlay.setVisible(true);if(this.onRender){this.onRender()}return this},close:function(){if(this.beforeClose){this.beforeClose()}this.closeDetail();a.MapView.prototype.close.apply(this,arguments);this.model.off();if(this.onClose){this.onClose()}return this},openDetail:function(){this.detailView=new this.infoWindow({model:this.model,map:this.map,marker:this.gOverlay});this.detailView.render()},closeDetail:function(){if(this.detailView){this.detailView.close();this.detailView=null}}});a.MarkerCollectionView=d.View.extend({markerView:a.MarkerView,markerViewChildren:{},constructor:function(){d.View.prototype.constructor.apply(this,arguments);b.bindAll(this,"render","closeChildren","closeChild","addChild","refresh","close");if(!this.options.map&&!this.map){throw new Error("A map must be specified on MarkerCollectionView instantiation")}this.map||(this.map=this.options.map);this.collection.on("reset",this.refresh,this);this.collection.on("add",this.addChild,this);this.collection.on("remove",this.closeChild,this)},render:function(e){var e=e||this.collection;if(this.beforeRender){this.beforeRender()}e.each(this.addChild);if(this.onRender){this.onRender()}return this},closeChildren:function(){for(cid in this.markerViewChildren){this.closeChild(this.markerViewChildren[cid])}},closeChild:function(f){var e=(f instanceof d.Model)?this.markerViewChildren[f.cid]:f;e.close();delete this.markerViewChildren[e.model.cid]},addChild:function(f){var e=new this.markerView({model:f,map:this.map});this.markerViewChildren[f.cid]=e;e.render()},refresh:function(){this.closeChildren();this.render()},close:function(){this.closeChildren();this.collection.off()}});return a})(Backbone,_,window.jQuery||window.Zepto||window.ender);